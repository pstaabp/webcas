/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/apps/gauss-elim.ts":
/*!********************************!*\
  !*** ./src/apps/gauss-elim.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _matrix_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/matrix */ \"./src/matrix/matrix.ts\");\n/* harmony import */ var _constants_integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _constants_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/parser */ \"./src/constants/parser.ts\");\n/* harmony import */ var _matrix_row_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../matrix/row_operation */ \"./src/matrix/row_operation.ts\");\n\n\n\n\nlet steps = new Array();\n// let matrices: Matrix[] = new Array();\n// let step: number[] = new Array();\n// let rowOperations: ElementaryRowOperation[] = new Array();\n// let rowOperationStr: string[] = new Array();\nlet settings = {\n    simplexMode: false,\n    vertLine: 'none',\n    horizLine: false,\n    slackLine: 'none',\n    firstColLine: false,\n    addRow: false,\n    showLaTeX: false,\n    pivButton: false,\n};\ndocument.addEventListener('DOMContentLoaded', init);\nfunction getCurrentStep() {\n    const step = steps.at(-1);\n    if (step != undefined)\n        return step;\n    throw new Error('Something went wrong');\n}\nfunction init() {\n    // load the settings if locally saved and then set all of the HTML elements.\n    if (localStorage && localStorage.getItem('GEset')) {\n        settings = JSON.parse(localStorage.getItem('GEset') ?? '');\n    }\n    document.querySelector('#simplexMode').checked = settings.simplexMode;\n    document.querySelector('#vertLine').value = settings.vertLine;\n    document.querySelector('#horizLine').checked = settings.horizLine;\n    // (document.querySelector('#numSlackVars') as HTMLInputElement).disabled = true;\n    // if (settings['slackLine'] == 'none') {\n    // \t$j(\"#slackLine[value='none']\").attr('checked', 'checked');\n    // } else if (settings['slackLine'] == 'std') {\n    // \t$j(\"#slackLine[value='std']\").attr('checked', 'checked');\n    // } else if (parseInt(settings['slackLine']) > -1) {\n    // \t$j('#numSlackVars').attr('disabled', false);\n    // \t$j('#numSlackVars').val(settings['slackLine']);\n    // \t$j(\"#slackLine[value='custom']\").attr('checked', 'checked');\n    // }\n    document.querySelector('#firstColLine').checked = settings.firstColLine;\n    document.querySelector('#addRow').checked = settings.addRow;\n    document.querySelector('#showLaTeX').checked = settings.showLaTeX;\n    document.querySelector('#pivButton').checked = settings.pivButton;\n    // Set the click handlers for all buttons\n    const setting_button = document.querySelector('#save-settings');\n    if (setting_button) {\n        setting_button.addEventListener('click', parseSettings);\n    }\n    // set the copy latex button code\n    const latex_copy_button = document.querySelector('#copy-latex');\n    if (latex_copy_button) {\n        latex_copy_button.addEventListener('click', () => {\n            copyToClipboard(decorateMatrix(getCurrentStep().matrix))\n                .then(() => console.log('text copied !'))\n                .catch(() => console.log('error'));\n        });\n    }\n    // hide the settings pane if visible\n    document.getElementById('settings-modal').setAttribute('style', 'display: none');\n    // set the click handler for the \"Clear Matrix Button\"\n    const clear_matrix_button = document.querySelector('#clear-matrix-button');\n    if (clear_matrix_button) {\n        clear_matrix_button.addEventListener('click', () => {\n            const matrix_entry = document.getElementById('matrix-entry');\n            matrix_entry.value = '';\n            matrix_entry.focus();\n        });\n        // Set the click handler for the \"Store Matrix Button\".\n        const store_matrix_button = document.getElementById('store-matrix-button');\n        if (store_matrix_button)\n            store_matrix_button.addEventListener('click', storeMatrix);\n        // Set the click handler for the \"Restart\" button.\n        const restart_button = document.getElementById('restart-button');\n        if (restart_button)\n            restart_button.addEventListener('click', restart);\n        // Set the click handler for the \"Settings\" button.\n        const set_link_button = document.getElementById('#set-link');\n        if (set_link_button)\n            set_link_button.addEventListener('click', () => {\n                //  show the settings?\n                // $j('#settings').show('blind', null, 'normal', null);\n                // Use bootstrap for this?\n            });\n        // Set the click handler for the \"Show Help\" button.\n        const show_help_button = document.getElementById('#help-link');\n        if (show_help_button)\n            show_help_button.addEventListener('click', () => {\n                //  show the settings?\n                // $j('#settings').show('blind', null, 'normal', null);\n            });\n    }\n}\nfunction parseSettings() {\n    settings.slackLine = document.getElementById('slackLine').value;\n    settings.vertLine = document.getElementById('vertLine').value;\n    settings.addRow = document.getElementById('addRow').checked;\n    settings.simplexMode = document.getElementById('simplexMode').checked;\n    settings.firstColLine = document.getElementById('firstColLine').checked;\n    settings.horizLine = document.getElementById('horizLine').checked;\n    settings.pivButton = document.getElementById('pivButton').checked;\n    settings.showLaTeX = document.getElementById('showLaTeX').checked;\n    localStorage.setItem('GEset', JSON.stringify(settings));\n}\nfunction restart() {\n    const matrix_entry = document.getElementById('matrix-entry');\n    console.log(matrices[0].toString());\n    matrix_entry.value = matrices[0].toString();\n    matrix_entry.focus();\n    step = [0];\n    matrices = [];\n    document.querySelectorAll('.row-op-step, .input-boxes, #orig-matrix').forEach((el) => el.remove());\n    document.querySelectorAll('#start-div, #entry-buttons').forEach((el) => {\n        el.setAttribute('style', 'display: block');\n    });\n}\n/* Take the original matrix input in a text area as rows of numbers,\n  store the matrix as an object and give the user a textbox for row operation input.\n*/\nfunction storeMatrix() {\n    const matrix_entry = document.getElementById('matrix-entry');\n    try {\n        // If the matrix has a \\hline in it, turn on the appropriate setting\n        if (/\\hline/.test(matrix_entry.value)) {\n            settings.horizLine = true;\n            document.getElementById('horizLine').checked = settings.horizLine;\n        }\n        matrices[0] = new _matrix_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(matrix_entry.value);\n    }\n    catch (err) {\n        alert(err);\n        return;\n    }\n    var convertToRational = false;\n    // if (matrices[0].isDecimal()) {\n    // \tconvertToRational = confirm(\n    // \t\t\"Your matrix contains decimals and often it's difficult to work with matrices of decimals. \" +\n    // \t\t\t'  Would you like to convert the decimals to rationals?'\n    // \t);\n    // }\n    // if (convertToRational) {\n    // \tmatrices[0] = matrices[0].toRational();\n    // }\n    if (settings.simplexMode)\n        matrices[0].SMmultiplier = new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1);\n    const main_div = document.getElementById('main-div');\n    if (main_div) {\n        main_div.insertAdjacentHTML('beforeend', `<div id=\"orig-matrix\"> \\\\[${decorateMatrix(matrices[0])}\\\\] </div>`);\n        typeset(main_div);\n    }\n    const start_div = document.getElementById('start-div');\n    if (start_div)\n        start_div.setAttribute('style', 'display: none;');\n    const entry_buttons = document.getElementById('entry-buttons');\n    if (entry_buttons)\n        entry_buttons.setAttribute('style', 'display: none');\n    rowOpInput();\n}\nfunction typeset(code) {\n    MathJax.startup.promise = MathJax.startup.promise\n        .then(() => MathJax.typesetPromise([code]))\n        .catch((err) => console.log('Typeset failed: ' + err.message));\n    return MathJax.startup.promise;\n}\nfunction copyToClipboard(text) {\n    // navigator clipboard api needs a secure context (https)\n    if (navigator.clipboard && window.isSecureContext) {\n        // navigator clipboard api method'\n        return navigator.clipboard.writeText(text);\n    }\n    else {\n        // text area method\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        // make the textarea out of viewport\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        return new Promise((res, rej) => {\n            // here the magic happens\n            document.execCommand('copy') ? res() : rej();\n            textArea.remove();\n        });\n    }\n}\nfunction decorateMatrix(m) {\n    var mstr = m.toLaTeX();\n    // This decorates the matrix depending on the settings.\n    if (settings.slackLine) {\n        const n = m.ncol() - m.nrow() - 1;\n        mstr = mstr.replace(/{(r{' + n + '})(.*)}/, '{$1|$2}');\n    }\n    if (settings.vertLine == 'last_col')\n        mstr = mstr.replace(/\\{(.*)r\\}/, '{$1|r}');\n    if (settings.vertLine == 'middle') {\n        var n = m.ncol();\n        if (n % 2 != 0) {\n            console.log('ERRoR!!');\n        }\n        else {\n            var re = new RegExp('{(r{' + ~~(n / 2) + '})(r+)}');\n            mstr = mstr.replace(re, '{$1|$2}');\n            console.log(mstr);\n        }\n    }\n    if (settings.firstColLine) {\n        mstr = mstr.replace(/\\{r(.*)\\}/, '{r|$1}');\n    }\n    if (settings.horizLine) {\n        var strarr = mstr.split('\\\\\\\\');\n        mstr = '';\n        var n = strarr.length;\n        for (var i = 0; i < n - 3; i++) {\n            mstr += strarr[i] + '\\\\\\\\';\n        }\n        mstr += strarr[n - 3] + '\\\\\\\\ \\\\hline';\n        mstr += strarr[n - 2] + '\\\\\\\\' + strarr[n - 1];\n    }\n    return mstr;\n}\nfunction rowOpInput() {\n    let str = `<div class='row md-3 input-boxes'><div class='input-group'>\n        <input id='input-box' type='text' class='form-control' placeholder='Row Operation:' aria-label='Enter the Row Operation'>\n        <button id='enter-button' class='btn btn-outline-secondary' type='button'>Enter</button>\n        <button id='undo-button' class='btn btn-outline-secondary' type='button'>Undo</button>`;\n    if (settings.showLaTeX) {\n        str += `<button id='LaTeX-button' class='btn btn-outline-secondary'\n\t\t\tdata-bs-toggle='modal' data-bs-target='#latex-modal'>Show LaTeX</button>`;\n    }\n    if (settings.addRow) {\n        str += \"<button id='addRow-button' class='btn btn-outline-secondary'>Add Row/Col to Tableau</button>\";\n    }\n    if (settings.pivButton) {\n        str += \"<button id='pivButton'>Select Pivot</button>\";\n    }\n    str += '</div></div>';\n    const main_div = document.getElementById('main-div');\n    if (main_div)\n        main_div.insertAdjacentHTML('beforeend', str);\n    const input_box = document.getElementById('input-box');\n    if (input_box) {\n        input_box.addEventListener('keypress', (e) => {\n            if (e.keyCode == 13)\n                parseRowOp();\n        });\n        input_box.focus();\n    }\n    document.getElementById('enter-button')?.addEventListener('click', parseRowOp);\n    document.getElementById('undo-button')?.addEventListener('click', undo);\n    document.getElementById('LaTeX-button')?.addEventListener('click', showLaTeXcode);\n    document.getElementById('addRow-button')?.addEventListener('click', addRowToTableau);\n    document.getElementById('pivButton')?.addEventListener('click', clickablePivots);\n    const output = document.getElementById('output');\n    if (output && output.children.length > 2)\n        unclickablePivots();\n}\nfunction parseRowOp() {\n    let rowOp = new Array(0);\n    const input_box = document.getElementById('input-box');\n    try {\n        const str = input_box.value;\n        rowOperationStr.push(str);\n        rowOp = _matrix_row_operation__WEBPACK_IMPORTED_MODULE_3__.ElementaryRowOperation.parseAll(str);\n        rowOp.forEach((r) => {\n            console.log(r.toString());\n            const m = matrices.at(-1);\n            if (m) {\n                console.log(m.operate(r).toString());\n                matrices.push(m.operate(r));\n                rowOperations.push(r);\n            }\n        });\n    }\n    catch (er) {\n        alert(er);\n        rowOperationStr.pop();\n        return;\n    }\n    const next_step = step.at(-1) ?? 0 + rowOp.length;\n    step.push(next_step);\n    var rowOpStr = '\\\\begin{array}{r}';\n    rowOp.forEach((r) => (rowOpStr += r.toLaTeX() + '\\\\\\\\'));\n    rowOpStr += '\\\\end{array}';\n    // remove the input box from the page\n    document.querySelector('.input-boxes')?.remove();\n    // Add the result to the page\n    document\n        .getElementById('main-div')\n        ?.insertAdjacentHTML('beforeend', `<div class=\"row-op-step\" id=\"out-${next_step}\"></div>`);\n    // Typeset the result\n    const out_div = document.getElementById(`out-${next_step}`);\n    console.log(matrices.at(-1)?.toString());\n    const m = decorateMatrix(matrices.at(-1) ?? new _matrix_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(2, 2));\n    if (out_div) {\n        out_div.innerHTML = `\\\\[${rowOpStr}\\\\qquad ${m} \\\\]`;\n        typeset(out_div);\n    }\n    rowOpInput();\n    // scroll to the bottom after entering in the input.\n    window.scroll(0, document.body.clientHeight);\n}\nfunction showLaTeXcode() {\n    const latex_modal = document.getElementById('latex-modal-body');\n    const m = decorateMatrix(matrices.at(-1) ?? new _matrix_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(2, 2));\n    if (latex_modal)\n        latex_modal.innerHTML = `<pre>${m}</pre>`;\n}\nfunction undo() {\n    if (step.at(-1) == 0) {\n        const matrix_entry = document.getElementById('matrix-entry');\n        if (matrix_entry) {\n            matrix_entry.value = matrices[0].toString().replaceAll('<br/>', '\\n').replaceAll(',', ' ');\n            matrix_entry.focus();\n        }\n        document.getElementById('matrix-div')?.setAttribute('style', 'display: block');\n        const output = document.getElementById('output');\n        if (output)\n            output.innerHTML = '';\n        matrices = new Array(0);\n        step = new Array(0);\n        rowOperations = new Array(0);\n        rowOperationStr = new Array(0);\n    }\n    else {\n        // Remove the last matrix from the page\n        document.querySelectorAll('.input-boxes').forEach((el) => el.remove());\n        document.querySelector(`#out-${step.at(-1)}`)?.remove();\n        // Remove the last few matrices (if multiple steps) from the matrices array.\n        if (step.length > 0) {\n            const numsteps = (step.at(-1) ?? 0) - (step.at(-2) ?? 1);\n            for (let i = 0; i < numsteps ?? -1; i++) {\n                matrices.pop();\n            }\n            step.pop();\n        }\n        // Add another row Operation Input box.\n        rowOpInput();\n        // Add the last row operation to the string.  Changed to blur, add string, and then refocus or it wasn't working\n        const input_box = document.getElementById('input-box');\n        if (input_box) {\n            input_box.blur();\n            input_box.value = rowOperationStr.pop() ?? '';\n            input_box.focus();\n        }\n    }\n}\nfunction addRowToTableau() {\n    const input_box = document.getElementById('input-box');\n    const input_str = input_box?.value ?? '';\n    // trim the ends and split by spaces.\n    const els = input_str.replace(/^\\s*/, '').replace(/\\s*$/, '').split(/\\s+/);\n    const lastMat = matrices.at(-1);\n    if (lastMat) {\n        const n = lastMat.nrow();\n        const m = lastMat.ncol();\n        if (els.length != m + 1) {\n            alert('The new row in the input box does not contain the same number of elements as the new tableau.');\n            return;\n        }\n        // Create a new matrix/tableau that is the previous one with the input\n        // put on the second to last row and filled with zeros on the second to last column.\n        const mat = new _matrix_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(n + 1, m + 1);\n        for (let i = 1; i <= n; i++)\n            for (let j = 1; j <= m - 1; j++)\n                mat.setElement(i, j, lastMat.getElement(i, j));\n        for (let i = 1; i <= n; i++) {\n            mat.setElement(i, m, lastMat.getElement(i, m - 1));\n            mat.setElement(i, m, lastMat.getElement(i, m));\n        }\n        for (let j = 1; j < m - 1; j++)\n            mat.setElement(n, j, lastMat.getElement(n, j));\n        mat.setElement(n + 1, m, lastMat.getElement(n, m - 1));\n        mat.setElement(n + 1, n + 1, lastMat.getElement(n, m));\n        mat.SMmultiplier = lastMat.SMmultiplier;\n        for (let j = 1; j <= m + 1; j++)\n            mat.setElement(n, j, _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseConstant(els[j - 1]));\n        matrices.push(mat);\n        const last_step = step.at(-1) ?? -1;\n        step.push(last_step + 1);\n        // remove the input box from the page\n        document.querySelectorAll('.input-boxes').forEach((el) => el.remove());\n        // Add the result to the page\n        const main_div = document.getElementById('main-div');\n        if (main_div)\n            main_div.append(`<div class=\"row-op-step\" id=\"out-${last_step}\"></div>`);\n        // Typeset the result\n        const last_matrix = document.getElementById(`out-${last_step}`);\n        if (last_matrix) {\n            last_matrix.innerHTML = `\\\\[ \\\\qquad ${decorateMatrix(mat)} \\\\]`;\n            typeset(last_matrix);\n        }\n        rowOpInput();\n        // scroll to the bottom after entering in the input.\n        window.scroll(0, document.body.clientHeight);\n    }\n}\n// Called after piv-button is clicked, makes the elements of the currently typeset matrix clickable.\n// In addition, hovering an element will give a different cursor and background color.\nfunction clickablePivots() {\n    // This sections grabs the current matrix and stores its name and elements\n    const last_step = step.at(-1) ?? -1;\n    const entries = document.querySelectorAll(`#out-${last_step} .mn`);\n    const m = matrices.at(-1) ?? new _matrix_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(1, 1);\n    const numRows = m.nrow();\n    let index = 0;\n    // Assign an index attribute as the (m,n) coordinates of the entry as a string\n    // Uses a little math to calculate (m,n) matrix indices, and stores it as an array value in a dictionary, with the MathJax id as the key\n    // If its not the original matrix, then slice the piv(x,y) numbers out\n    entries.forEach((el, i) => {\n        if (last_step > 1 && i > 1) {\n            // Create index attribute as \"m,n\"\n            el.setAttribute('index', `${(index % numRows) + 1},${Math.ceil((index + 1) / numRows)}`);\n            el.addEventListener('click', (ev) => pivotOnClick(ev));\n            el.classList.add('pivotable');\n        }\n    });\n}\n// Called during rowOpInput() to make the previous matrix unclickable\nfunction unclickablePivots() {\n    // This sections grabs the current matrix and stores its name and elements\n    const prev_step = step.at(-2) ?? -1;\n    // var oldMatrixId = $j(\"#output\").children().eq(-3)[0].id;\n    const entries = document.querySelectorAll(`#out-${prev_step} .mn`);\n    // If its not the original matrix, slice the piv(x,y) numbers\n    // if (oldMatrixId != 'orig-matrix') entries = entries.slice(2);\n    // Remove onclick, revert class to mn, unbind hover, restore white background since mouseleave won't do it anymore\n    entries.forEach((el, i) => {\n        if (prev_step > 1 && i > 1) {\n            el.removeEventListener('click', (ev) => pivotOnClick(ev));\n            el.classList.remove('pivotable');\n        }\n    });\n}\n// Sets the clicked element to green, and pivots on it\nfunction pivotOnClick(ev) {\n    const el = ev.target;\n    // Remove last clicked attribute (reset last pivot to white)\n    document.querySelectorAll('.lastClicked').forEach((el) => el.classList.remove('lastClicked'));\n    // Set clicked element to green, set new lastClicked\n    el?.classList.add('lastClicked');\n    // Put the piv string in the row input box and then parse the operation\n    const input_box = document.getElementById('input-box');\n    if (input_box)\n        input_box.value = `piv(${el?.getAttribute('index')})`;\n    // $j(\"#input-box\").val(\"piv(\"+$j(this).attr(\"index\")+\")\");\n    parseRowOp();\n}\n\n\n//# sourceURL=webpack:///./src/apps/gauss-elim.ts?");

/***/ }),

/***/ "./src/constants/abstract_constant.ts":
/*!********************************************!*\
  !*** ./src/constants/abstract_constant.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Constant: () => (/* binding */ Constant)\n/* harmony export */ });\n/* This function parses a string and returns a real constant,\ninteger constant or rational constant */\nclass Constant {\n    static ZERO;\n}\n\n\n//# sourceURL=webpack:///./src/constants/abstract_constant.ts?");

/***/ }),

/***/ "./src/constants/abstract_real.ts":
/*!****************************************!*\
  !*** ./src/constants/abstract_real.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealConstant: () => (/* binding */ RealConstant)\n/* harmony export */ });\n/* harmony import */ var _abstract_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_constant */ \"./src/constants/abstract_constant.ts\");\n\nclass RealConstant extends _abstract_constant__WEBPACK_IMPORTED_MODULE_0__.Constant {\n    compareTo(num) {\n        return this.toReal().value - num.toReal().value;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/constants/abstract_real.ts?");

/***/ }),

/***/ "./src/constants/complex.ts":
/*!**********************************!*\
  !*** ./src/constants/complex.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Complex: () => (/* binding */ Complex)\n/* harmony export */ });\n/* harmony import */ var _abstract_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_constant */ \"./src/constants/abstract_constant.ts\");\n/* harmony import */ var _integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./real */ \"./src/constants/real.ts\");\n/* harmony import */ var _rational__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rational */ \"./src/constants/rational.ts\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser */ \"./src/constants/parser.ts\");\n\n\n\n\n\nclass Complex extends _abstract_constant__WEBPACK_IMPORTED_MODULE_0__.Constant {\n    _real;\n    _imag;\n    constructor(arg1, arg2) {\n        super();\n        this._real = new _integer__WEBPACK_IMPORTED_MODULE_1__.Integer(0);\n        this._imag = new _integer__WEBPACK_IMPORTED_MODULE_1__.Integer(0);\n        if (typeof arg1 === 'string' && arg2 == undefined) {\n            if (!_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.complex.test(arg1))\n                throw arg1 + ' is not a complex number';\n            const match = arg1.match(_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.complex);\n            if (match) {\n                this._real = _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseRealConstant(match[2]);\n                this._imag = _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseRealConstant(match[4]);\n            }\n            if (match != undefined && match[3] == '-')\n                this._imag.times('-1');\n        }\n        else {\n            if (arg1 instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer || arg1 instanceof _real__WEBPACK_IMPORTED_MODULE_2__.Real || arg1 instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational) {\n                this._real = arg1;\n            }\n            else {\n                this._real = _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseRealConstant(`${arg1}`);\n            }\n            if (arg2 instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer || arg2 instanceof _real__WEBPACK_IMPORTED_MODULE_2__.Real || arg2 instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational) {\n                this._imag = arg2;\n            }\n            else {\n                this._imag = _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseRealConstant(`${arg2}`);\n            }\n        }\n    }\n    get real() {\n        return this._real;\n    }\n    get imag() {\n        return this._imag;\n    }\n    toString() {\n        return `${this._real}+${this._imag}i`;\n    }\n    toLaTeX() {\n        return this.toString();\n    }\n    equals(num) {\n        if (num instanceof Complex) {\n            return num.real.equals(this._real) && num.imag.equals(this._imag);\n        }\n        return false;\n    }\n    simplify() {\n        return new Complex(this._real.simplify(), this._imag.simplify());\n    }\n    clone() {\n        return new Complex(this._real, this._imag);\n    }\n    neg() {\n        return new Complex(this._real.neg(), this._imag.neg());\n    }\n    plus(num) {\n        if (typeof num === 'string')\n            return this.plus(_parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(num));\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer || num instanceof _real__WEBPACK_IMPORTED_MODULE_2__.Real || num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new Complex(this.real.plus(num), this.imag.plus(num));\n        else if (num instanceof Complex)\n            result = new Complex(this.real.plus(num.real), this.imag.plus(num.imag));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    minus(num) {\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Complex(this._real.minus(num), this._imag);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_2__.Real)\n            result = new Complex(this._real.minus(num), this._imag);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new Complex(this._real.minus(num), this._imag);\n        else if (num instanceof Complex)\n            result = new Complex(this._real.minus(num.real), this._imag.minus(num.imag));\n        else if (typeof num === 'string')\n            result = this.minus(_parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(num));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    times(num) {\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Complex(this._real.times(num), this._imag.times(num));\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_2__.Real)\n            result = new Complex(this._real.times(num), this._imag.times(num));\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new Complex(this._real.times(num), this._imag.times(num));\n        else if (num instanceof Complex)\n            result = new Complex(num.real.times(this._real).minus(num.imag.times(this.imag)), num.imag.times(this._real).plus(num.real.times(this._imag)));\n        else if (typeof num === 'string')\n            result = this.times(_parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(num));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    div(num) {\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Complex(this._real.div(num), this._imag.div(num));\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_2__.Real)\n            result = new Complex(this._real.div(num), this._imag.div(num));\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new Complex(this._real.div(num), this._imag.div(num));\n        else if (num instanceof Complex) {\n            const denom = num.real.times(num.real).plus(num.imag.times(num.imag));\n            result = new Complex(this.real.times(num.real).plus(this.imag.times(num.imag)).div(denom), this.imag.times(num.real).minus(this.real.times(num.imag)).div(denom));\n        }\n        else if (typeof num === 'string')\n            result = this.div(_parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(num));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    // conjugate\n    conj() {\n        return new Complex(this._real, this._imag.neg());\n    }\n}\n\n\n//# sourceURL=webpack:///./src/constants/complex.ts?");

/***/ }),

/***/ "./src/constants/integer.ts":
/*!**********************************!*\
  !*** ./src/constants/integer.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Integer: () => (/* binding */ Integer)\n/* harmony export */ });\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser */ \"./src/constants/parser.ts\");\n/* harmony import */ var _abstract_real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract_real */ \"./src/constants/abstract_real.ts\");\n/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./complex */ \"./src/constants/complex.ts\");\n/* harmony import */ var _rational__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rational */ \"./src/constants/rational.ts\");\n/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./real */ \"./src/constants/real.ts\");\n\n\n\n\n\nclass Integer extends _abstract_real__WEBPACK_IMPORTED_MODULE_1__.RealConstant {\n    _value;\n    static ZERO = new Integer(0);\n    constructor(arg) {\n        super();\n        // Having trouble loading constRe so will redefine here.\n        const intRe = new RegExp('^[-+]?\\\\d+$');\n        if (!intRe.test(`${arg}`))\n            throw new Error(`${arg} is not an integer`);\n        this._value = BigInt(arg);\n    }\n    toString() {\n        return `${this._value}`;\n    }\n    toLaTeX() {\n        return this.toString();\n    }\n    get value() {\n        return this._value;\n    }\n    toReal() {\n        return new _real__WEBPACK_IMPORTED_MODULE_4__.Real(Number(this._value));\n    }\n    clone() {\n        return new Integer(this._value);\n    }\n    equals(num) {\n        if (num instanceof Integer)\n            return this._value === num.value;\n        return false;\n    }\n    simplify() {\n        return this;\n    }\n    neg() {\n        return new Integer(-1n * this._value);\n    }\n    plus(arg) {\n        let num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_0__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof Integer)\n            result = new Integer(num.value + this._value);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_4__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_4__.Real(num.value + Number(this._value));\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new _rational__WEBPACK_IMPORTED_MODULE_3__.Rational(num.numer + this._value * num.denom, num.denom);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.plus(num.real), num.imag);\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    minus(arg) {\n        let num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_0__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof Integer)\n            result = new Integer(this._value - num._value);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_4__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_4__.Real(Number(this._value) - num.value);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new _rational__WEBPACK_IMPORTED_MODULE_3__.Rational(this._value * num.denom - num.numer, num.denom);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.minus(num.real), num.imag.neg());\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    times(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_0__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof Integer)\n            result = new Integer(num.value * this._value);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_4__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_4__.Real(num.value * Number(this._value));\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new _rational__WEBPACK_IMPORTED_MODULE_3__.Rational(num.numer * this._value, num.denom);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.times(num.real), this.times(num.imag));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    div(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_0__.Parser.parseConstant(arg) : arg;\n        let result;\n        // need to test for division by 0.\n        if (num instanceof Integer)\n            result = new _rational__WEBPACK_IMPORTED_MODULE_3__.Rational(this._value, num.value);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_4__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_4__.Real(Number(this._value) / num.value);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            result = new _rational__WEBPACK_IMPORTED_MODULE_3__.Rational(num.denom * this._value, num.numer);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this, Integer.ZERO).div(num);\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    static gcd(...nums) {\n        // If argments are of type Integer or number, convert to BigInts.\n        const values = nums.map((n) => (n instanceof Integer ? n.value : typeof n === 'number' ? BigInt(n) : n));\n        if (values.length == 1) {\n            return values[0];\n        }\n        else if (values.length == 2) {\n            let a = values[0] < 0 ? -values[0] : values[0];\n            let b = values[1] < 0 ? -values[1] : values[1];\n            if (a < b) {\n                const t = a;\n                a = b;\n                b = t;\n            }\n            while (b !== 0n) {\n                const t = a % b;\n                a = b;\n                b = t;\n            }\n            return a;\n        }\n        else if (values.length % 2 == 0) {\n            const arr = Array(values.length / 2).fill(0n);\n            for (let i = 0; i < values.length / 2; i++) {\n                arr[i] = Integer.gcd(values[2 * i], values[2 * i + 1]);\n            }\n            return Integer.gcd(...arr);\n        }\n        else {\n            const v = values.shift();\n            return Integer.gcd(v === undefined ? 1n : v, Integer.gcd(...values));\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/constants/integer.ts?");

/***/ }),

/***/ "./src/constants/parser.ts":
/*!*********************************!*\
  !*** ./src/constants/parser.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   constRe: () => (/* binding */ constRe)\n/* harmony export */ });\n/* harmony import */ var _integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./complex */ \"./src/constants/complex.ts\");\n/* harmony import */ var _rational__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rational */ \"./src/constants/rational.ts\");\n/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./real */ \"./src/constants/real.ts\");\n\n\n\n\nconst ratStr = '([-+]?\\\\d+)\\\\/(\\\\d+)';\nconst intStr = '[-+]?\\\\d+';\nconst posIntStr = '\\\\+?\\\\d+';\nconst realStr = '[-+]?\\\\d*\\\\.\\\\d*';\nconst imagStr1 = '([+-]?[\\\\d.\\\\/]+)i';\nconst imagStr2 = '(\\\\(([+-]?[\\\\d.\\\\/]+)\\\\))i';\nconst complexStr1 = '([+-]?[\\\\d.\\\\/]+)?\\\\+?(-?[\\\\d.\\\\/]+)?i';\nconst complexStr2 = '\\\\(([+-]?[\\\\d.\\\\/]+)\\\\)?\\\\+?(-?[\\\\d.\\\\/]+)?i';\nconst complexStr3 = '([+-]?[\\\\d.\\\\/]+)?([+-])?(\\\\((-?[\\\\d.\\\\/]+)\\\\))?i';\nconst complexStr4 = '\\\\(([+-]?[\\\\d.\\\\/]+)?\\\\)([+-])?(\\\\((-?[\\\\d.\\\\/]+)\\\\))?i';\nconst imagRe1 = new RegExp('^' + imagStr1 + '$');\nconst imagRe2 = new RegExp('^' + imagStr2 + '$');\nconst complexRe1 = new RegExp('^' + complexStr1 + '$');\nconst complexRe2 = new RegExp('^' + complexStr2 + '$');\nconst complexRe3 = new RegExp('^' + complexStr3 + '$');\nconst complexRe4 = new RegExp('^' + complexStr4 + '$');\nconst complexRe = new RegExp('^' + imagStr1 + '|' + imagStr2 + '|' + complexStr1 + '|' + complexStr2 + '|' + complexStr3 + '|' + complexStr4 + '$');\nconst constRe = {\n    rational: new RegExp('^' + ratStr + '$'),\n    integer: new RegExp('^' + intStr + '$'),\n    pos_int: new RegExp(`^${posIntStr}$`),\n    real: new RegExp('^' + realStr + '$'),\n    complex: complexRe,\n    real_const: new RegExp('^' + ratStr + '|' + intStr + '|' + realStr + '$'),\n};\nclass Parser {\n    static parseRealConstant(str) {\n        if (constRe.rational.test(str))\n            return new _rational__WEBPACK_IMPORTED_MODULE_2__.Rational(str);\n        else if (constRe.integer.test(str))\n            return new _integer__WEBPACK_IMPORTED_MODULE_0__.Integer(str);\n        else if (constRe.real.test(str))\n            return new _real__WEBPACK_IMPORTED_MODULE_3__.Real(str);\n        else\n            throw str + ' does not parse to a real constant.';\n    }\n    static parseConstant(str) {\n        if (constRe.complex.test(str))\n            return Parser.parseComplex(str);\n        else if (constRe.real_const.test(str))\n            return Parser.parseRealConstant(str);\n        else\n            throw str + ' does not parse to a constant.';\n    }\n    static parseComplex(str) {\n        const m1 = imagRe1.exec(str);\n        if (m1 && m1[1] !== undefined)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(0, Parser.parseRealConstant(m1[1]));\n        const m2 = imagRe2.exec(str);\n        if (m2 && m2[2] !== undefined)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(0, Parser.parseRealConstant(m2[2]));\n        const m3 = complexRe1.exec(str);\n        if (m3 && m3[2] !== undefined)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(Parser.parseRealConstant(m3[1]), Parser.parseRealConstant(m3[2]));\n        const m4 = complexRe2.exec(str);\n        if (m4 && m4[2] !== undefined)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(Parser.parseRealConstant(m4[1]), Parser.parseRealConstant(m4[2]));\n        const m5 = complexRe3.exec(str);\n        if (m5 && m5[4] !== undefined)\n            return m5[2] == '+'\n                ? new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(Parser.parseRealConstant(m5[1]), Parser.parseRealConstant(m5[4]))\n                : new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(Parser.parseRealConstant(m5[1]), Parser.parseRealConstant(m5[4]).neg());\n        const m6 = complexRe4.exec(str);\n        if (m6 && m6[4] !== undefined)\n            return m6[2] == '+'\n                ? new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(Parser.parseRealConstant(m6[1]), Parser.parseRealConstant(m6[4]))\n                : new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(Parser.parseRealConstant(m6[1]), Parser.parseRealConstant(m6[4]).neg());\n        throw new Error('Should not have gotten to this line.');\n    }\n}\n\n\n//# sourceURL=webpack:///./src/constants/parser.ts?");

/***/ }),

/***/ "./src/constants/rational.ts":
/*!***********************************!*\
  !*** ./src/constants/rational.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Rational: () => (/* binding */ Rational)\n/* harmony export */ });\n/* harmony import */ var _abstract_real__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_real */ \"./src/constants/abstract_real.ts\");\n/* harmony import */ var _integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./complex */ \"./src/constants/complex.ts\");\n/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./real */ \"./src/constants/real.ts\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser */ \"./src/constants/parser.ts\");\n\n\n\n\n\nclass Rational extends _abstract_real__WEBPACK_IMPORTED_MODULE_0__.RealConstant {\n    _numer;\n    _denom;\n    constructor(arg1, arg2, arg3) {\n        super();\n        let numer = BigInt(0), denom = BigInt(1);\n        if (typeof arg1 !== 'string' && arg2 !== undefined) {\n            if (!_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.integer.test(`${arg1}`))\n                throw `The number ${arg1} is not an integer.`;\n            if (!_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.integer.test(`${arg2}`))\n                throw `The number ${arg2} is not an integer.`;\n            numer = arg1 instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer ? arg1.value : BigInt(arg1);\n            denom = arg2 instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer ? arg2.value : BigInt(arg2);\n        }\n        else if (typeof arg1 === 'string' && arg2 === undefined) {\n            if (!_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.rational.test(arg1))\n                throw arg1 + ' is not a rational number';\n            const match = arg1.match(_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.rational);\n            if (match !== null) {\n                numer = BigInt(match[1]);\n                denom = BigInt(match[2]);\n            }\n        }\n        else {\n            throw \"Constructor error. Can't combine a string with an other argument. \";\n        }\n        this._numer = denom < 0 ? -numer : numer;\n        this._denom = denom >= 0 ? denom : -denom;\n        // reduce the fraction.\n        this.reduce();\n    }\n    get numer() {\n        return this._numer;\n    }\n    get denom() {\n        return this._denom;\n    }\n    simplify() {\n        if (this._denom == 1n)\n            return new _integer__WEBPACK_IMPORTED_MODULE_1__.Integer(this._numer);\n        if (this._numer == 0n)\n            return new _integer__WEBPACK_IMPORTED_MODULE_1__.Integer(0);\n        return this;\n    }\n    toString() {\n        return (this._numer < 0 ? '-' : '') + (this._numer < 0 ? -this._numer : this._numer) + '/' + this._denom;\n    }\n    toLaTeX() {\n        return ((this._numer < 0 ? '-' : '') +\n            '\\\\frac{ ' +\n            (this._numer < 0 ? -this._numer : this._numer) +\n            '}{' +\n            this._denom +\n            '}');\n    }\n    toReal() {\n        return new _real__WEBPACK_IMPORTED_MODULE_3__.Real(Number(this._numer) / Number(this._denom));\n    }\n    equals(num) {\n        if (num instanceof Rational)\n            return num.numer === this._numer && num.denom === this._denom;\n        return false;\n    }\n    clone() {\n        return new Rational(this._numer, this._denom);\n    }\n    // unary negative.\n    neg() {\n        return new Rational(-1n * this._numer, this._denom);\n    }\n    plus(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Rational(num.value * this._denom + this._numer, this._denom);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_3__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_3__.Real(num.value + this.toReal().value);\n        else if (num instanceof Rational)\n            result = new Rational(num.numer * this._denom + num.denom * this._numer, num.denom * this._denom);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.plus(num.real), num.imag);\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    minus(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Rational(this._numer - num.value * this._denom, this._denom);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_3__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_3__.Real(this.toReal().value - num.value);\n        else if (num instanceof Rational)\n            result = new Rational(num.denom * this._numer - num.numer * this._denom, num.denom * this._denom);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.minus(num.real), num.imag.times(new _integer__WEBPACK_IMPORTED_MODULE_1__.Integer(-1)));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    times(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Rational(num.value * this._numer, this._denom);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_3__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_3__.Real(num.value * this.toReal().value);\n        else if (num instanceof Rational)\n            result = new Rational(num.numer * this._numer, num.denom * this._denom);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex)\n            result = new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.times(num.real), this.times(num.imag));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n        return result.simplify();\n    }\n    div(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        let result;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_1__.Integer)\n            result = new Rational(this.numer, this.denom * num.value);\n        else if (num instanceof _real__WEBPACK_IMPORTED_MODULE_3__.Real)\n            result = new _real__WEBPACK_IMPORTED_MODULE_3__.Real(this.toReal().value / num.value);\n        else if (num instanceof Rational)\n            result = new Rational(this._numer * num.denom, this._denom * num.numer);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_2__.Complex) {\n            const d = num.real.times(num.real).plus(num.imag.times(num.imag));\n            return new _complex__WEBPACK_IMPORTED_MODULE_2__.Complex(this.times(num.real).div(d), this.times(num.imag).neg().div(d));\n        }\n        else\n            throw new Error('This line should not be reached.');\n        return result.simplify();\n    }\n    // reduce the fraction such that gcd(numer,denom)=1;\n    reduce() {\n        const c = _integer__WEBPACK_IMPORTED_MODULE_1__.Integer.gcd(this._numer, this.denom);\n        this._numer /= c;\n        this._denom /= c;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/constants/rational.ts?");

/***/ }),

/***/ "./src/constants/real.ts":
/*!*******************************!*\
  !*** ./src/constants/real.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Real: () => (/* binding */ Real)\n/* harmony export */ });\n/* harmony import */ var _abstract_real__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_real */ \"./src/constants/abstract_real.ts\");\n/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./complex */ \"./src/constants/complex.ts\");\n/* harmony import */ var _integer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _rational__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rational */ \"./src/constants/rational.ts\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser */ \"./src/constants/parser.ts\");\n\n\n\n\n\nclass Real extends _abstract_real__WEBPACK_IMPORTED_MODULE_0__.RealConstant {\n    _value;\n    static ZERO = new Real(0);\n    constructor(arg) {\n        super();\n        if (typeof arg === 'string') {\n            if (!_parser__WEBPACK_IMPORTED_MODULE_4__.constRe.real.test(arg))\n                throw arg + ' is not a real number';\n            this._value = parseFloat(arg);\n        }\n        else {\n            this._value = arg;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    toReal() {\n        return this;\n    }\n    toString() {\n        return `${this._value}`;\n    }\n    toLaTeX() {\n        return this.toString();\n    }\n    equals(num) {\n        if (num instanceof Real)\n            return this._value === num.value;\n        return false;\n    }\n    clone() {\n        return new Real(this._value);\n    }\n    simplify() {\n        return this;\n    }\n    neg() {\n        return new Real(-1 * this._value);\n    }\n    plus(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_2__.Integer)\n            return new Real(Number(num.value) + this._value);\n        else if (num instanceof Real)\n            return new Real(num.value + this._value);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            return new Real(this._value + num.toReal().value);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_1__.Complex)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(num.real.plus(this), num.imag);\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n    }\n    minus(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_2__.Integer)\n            return new Real(this._value - Number(num.value));\n        else if (num instanceof Real)\n            return new Real(this._value - num.value);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            return new Real(this._value - num.toReal().value);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_1__.Complex)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(this.minus(num.real), num.imag.neg());\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n    }\n    times(arg) {\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_2__.Integer)\n            return new Real(this._value * Number(num.value));\n        else if (num instanceof Real)\n            return new Real(this._value * num.value);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            return new Real(this._value * num.toReal().value);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_1__.Complex)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(this.times(num.real), this.times(num.imag));\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n    }\n    div(arg) {\n        // Need to check for division by zero.\n        const num = typeof arg === 'string' ? _parser__WEBPACK_IMPORTED_MODULE_4__.Parser.parseConstant(arg) : arg;\n        if (num instanceof _integer__WEBPACK_IMPORTED_MODULE_2__.Integer)\n            return new Real(this._value / Number(num.value));\n        else if (num instanceof Real)\n            return new Real(this.value / num._value);\n        else if (num instanceof _rational__WEBPACK_IMPORTED_MODULE_3__.Rational)\n            return new Real(this._value / num.toReal().value);\n        else if (num instanceof _complex__WEBPACK_IMPORTED_MODULE_1__.Complex)\n            return new _complex__WEBPACK_IMPORTED_MODULE_1__.Complex(this, Real.ZERO).div(num);\n        else\n            throw new Error(\"This line shouldn't be reached.\");\n    }\n}\n\n\n//# sourceURL=webpack:///./src/constants/real.ts?");

/***/ }),

/***/ "./src/matrix/matrix.ts":
/*!******************************!*\
  !*** ./src/matrix/matrix.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnVector: () => (/* binding */ ColumnVector),\n/* harmony export */   Matrix: () => (/* binding */ Matrix),\n/* harmony export */   RowVector: () => (/* binding */ RowVector)\n/* harmony export */ });\n/* harmony import */ var _constants_abstract_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/abstract_constant */ \"./src/constants/abstract_constant.ts\");\n/* harmony import */ var _constants_integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _constants_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/parser */ \"./src/constants/parser.ts\");\n/* harmony import */ var _row_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./row_operation */ \"./src/matrix/row_operation.ts\");\n\n\n\n\n/* Matrix class that supports standard matrix operations */\nclass Matrix {\n    _arr;\n    _SMmult;\n    constructor(arg1, arg2) {\n        this._arr = new Array();\n        if (typeof arg1 == 'number' && typeof arg2 === 'number') {\n            // Check that arg1 and arg2 are positive integers.\n            for (let i = 0; i < arg1; i++) {\n                this._arr[i] = new Array();\n                for (let j = 0; j < arg2; j++)\n                    this._arr[i][j] = new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(0);\n            }\n        }\n        else if (typeof arg1 === 'string') {\n            // New RegEx location, handles standard and LaTeX\n            let str = arg1\n                .replace(/\\s*&\\s*/g, ' ')\n                .replace(/\\\\\\\\/g, '')\n                .replace(/\\n/g, ';')\n                .replace(/;*$/, '')\n                .replace(/\\\\hline/g, '');\n            const m = /(.*);\\s*$/.exec(str);\n            if (m && m[1] != undefined)\n                str = m[1];\n            const s = str.split(';');\n            for (let i = 0; i < s.length; i++) {\n                const s2 = s[i].split(/\\s+/);\n                var row = new Array();\n                for (let j = 0; j < s2.length; j++) {\n                    if (s2[j] != '')\n                        row[row.length] = _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseConstant(s2[j]);\n                }\n                this._arr[i] = row;\n            }\n        }\n        else if (Array.isArray(arg1)) {\n            for (let i = 0; i < arg1.length; i++) {\n                this._arr[i] = arg1[i].map((el) => (el instanceof _constants_abstract_constant__WEBPACK_IMPORTED_MODULE_0__.Constant ? el : _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseConstant(`${el}`)));\n            }\n        }\n        for (let i = 1; i < this._arr.length; i++) {\n            if (this._arr[0].length != this._arr[i].length) {\n                throw 'Error in constructing matrix.  Each row must be the same length.';\n            }\n        }\n    }\n    set SMmultiplier(value) {\n        this._SMmult = typeof value === 'number' ? new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(value) : value;\n    }\n    // number of rows in the matrix.\n    nrow() {\n        return this._arr.length;\n    }\n    // number of columns in the matrix.\n    ncol() {\n        return this._arr[0].length;\n    }\n    equals(m) {\n        if (m.ncol() != this.ncol())\n            return false;\n        if (m.nrow() != this.nrow())\n            return false;\n        for (let i = 1; i <= this._arr.length; i++)\n            for (let j = 1; j <= this._arr[0].length; j++)\n                if (!this.getElement(i, j).equals(m.getElement(i, j)))\n                    return false;\n        return true;\n    }\n    setElement(row, col, value) {\n        if (row < 1)\n            throw new Error('The row input must be positive');\n        if (row > this.nrow())\n            throw new Error('The row input cannot be greater than the number of rows.');\n        if (col < 1)\n            throw new Error('The row input must be positive');\n        if (col > this.ncol())\n            throw new Error('The col input cannot be greater than the number of columns.');\n        if (typeof value === 'number' || typeof value === 'bigint' || typeof value === 'string')\n            this._arr[row - 1][col - 1] = _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseConstant(`${value}`);\n        else\n            this._arr[row - 1][col - 1] = value;\n        return this;\n    }\n    getElement(row, col) {\n        if (row < 1)\n            throw new Error('The row input must be positive');\n        if (row > this.nrow())\n            throw new Error('The row input cannot be greater than the number of rows.');\n        if (col < 1)\n            throw new Error('The row input must be positive');\n        if (col > this.ncol())\n            throw new Error('The col input cannot be greater than the number of columns.');\n        return this._arr[row - 1][col - 1];\n    }\n    clone() {\n        const m = new Matrix(this._arr.length, this._arr[0].length);\n        for (let i = 1; i <= this._arr.length; i++)\n            for (let j = 1; j <= this._arr[0].length; j++)\n                m.setElement(i, j, this.getElement(i, j).clone());\n        return m;\n    }\n    toString() {\n        const rows = [];\n        for (let i = 0; i < this._arr.length; i++)\n            rows.push(this._arr[i].join(' '));\n        return rows.join('\\n');\n    }\n    toLaTeX() {\n        let str = '\\\\left[\\\\begin{array}{' + Array(this.ncol()).fill('r').join('') + '}\\n';\n        for (let i = 0; i < this.nrow(); i++)\n            str += this._arr[i].map((num) => num.toLaTeX()).join(' & ') + '\\\\\\\\\\n';\n        return str + '\\\\end{array}\\\\right]';\n    }\n    // Returns the column from the vector as a ColumnVector\n    column(col) {\n        if (col < 1)\n            throw new Error('The col input must be positive');\n        if (col > this.ncol())\n            throw new Error('The col input cannot be greater than the number of columns.');\n        return new ColumnVector(Array(this.nrow())\n            .fill(0)\n            .map((_, i) => this._arr[i][col - 1]));\n    }\n    setColumn(num, col) {\n        for (let i = 1; i <= this.nrow(); i++) {\n            this.setElement(i, num, col.getElement(i, 1));\n        }\n        return this;\n    }\n    // Returns the rth row of the Matrix as a Row Vector\n    row(r) {\n        if (r < 1)\n            throw new Error('The col input must be positive');\n        if (r > this.ncol())\n            throw new Error('The col input cannot be greater than the number of columns.');\n        return new RowVector(Array(this.ncol())\n            .fill(0)\n            .map((_, j) => this._arr[r - 1][j]));\n    }\n    setRow(num, row) {\n        for (let j = 1; j <= this.ncol(); j++) {\n            this.setElement(num, j, row.getElement(1, j));\n        }\n        return this;\n    }\n    // Add a matrix A to the current matrix.\n    plus(A) {\n        if (this.nrow() !== A.nrow() || this.ncol() !== A.ncol())\n            throw new Error('Matrices are incompatible for addition.');\n        const result = new Matrix(this.nrow(), this.ncol());\n        for (let i = 1; i <= this.nrow(); i++)\n            for (let j = 1; j <= this.ncol(); j++)\n                result.setElement(i, j, this.getElement(i, j).plus(A.getElement(i, j)));\n        return result;\n    }\n    // Add a matrix A to the current matrix.\n    minus(A) {\n        if (this.nrow() !== A.nrow() || this.ncol() !== A.ncol())\n            throw new Error('Matrices are incompatible for subtraction.');\n        const result = new Matrix(this.nrow(), this.ncol());\n        for (let i = 1; i <= this.nrow(); i++)\n            for (let j = 1; j <= this.ncol(); j++)\n                result.setElement(i, j, this.getElement(i, j).minus(A.getElement(i, j)));\n        return result;\n    }\n    times(arg) {\n        const result = new Matrix(this.nrow(), arg instanceof Matrix ? arg.ncol() : this.ncol());\n        if (arg instanceof Matrix) {\n            if (this.ncol() != arg.nrow())\n                throw new Error('Matrices are not compatible for multiplication.');\n            for (let i = 1; i <= result.nrow(); i++)\n                for (let j = 1; j <= result.ncol(); j++)\n                    result.setElement(i, j, this.row(i).dot(arg.column(j)));\n        }\n        else {\n            for (let i = 1; i <= result.nrow(); i++)\n                for (let j = 1; j <= result.ncol(); j++)\n                    result.setElement(i, j, this.getElement(i, j).times(arg));\n        }\n        return result;\n    }\n    transpose() {\n        const result = new Matrix(this.ncol(), this.nrow());\n        for (let i = 1; i <= result.nrow(); i++)\n            for (let j = 1; j <= result.ncol(); j++)\n                result.setElement(i, j, this.getElement(j, i));\n        return result;\n    }\n    swapRows(row1, row2) {\n        if (row1 < 1 || row1 > this.nrow() || row2 < 1 || row2 > this.nrow())\n            throw new Error('Row numbers must be within the valid rows of this matrix.');\n        if (row1 == row2)\n            throw new Error('When swapping rows, the rows must be unique.');\n        const r = this.row(row1);\n        this.setRow(row1, this.row(row2));\n        this.setRow(row2, r);\n        return this;\n    }\n    multiplyRowBy(num, row) {\n        this.setRow(row, this.row(row).times(num));\n        return this;\n    }\n    // Takes a linear combination of rows and replaces another row.\n    rowCombination(num1, row1, num2, row2, dest_row) {\n        if (row1 < 1 || row1 > this.nrow() || row2 < 1 || row2 > this.nrow() || dest_row < 1 || dest_row > this.nrow())\n            throw new Error('Row numbers must be within the valid rows of this matrix.');\n        if (row1 != dest_row && row2 != dest_row)\n            throw new Error('The destination row must be one of the other two rows.');\n        return this.setRow(dest_row, this.row(row1).times(num1).plus(this.row(row2).times(num2)));\n    }\n    // shortcut for row operations of the form kRi+Rj->Rj\n    multiplyRowByAndAdd(num, row, dest_row) {\n        return this.rowCombination(num, row, new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1), dest_row, dest_row);\n    }\n    // Perform a pivot in which the pivot element is a 1.\n    pivot(row, col) {\n        if (row < 1 || row > this.nrow())\n            throw new Error('The row number for the pivot must be between 1 and the number of rows');\n        if (col < 1 || col > this.ncol())\n            throw new Error('The column number for the pivot must be between 1 and the number of columns');\n        if (this.getElement(row, col).equals(_constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer.ZERO))\n            throw new Error('The pivot element cannot be zero.');\n        this.multiplyRowBy(new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1).div(this.getElement(row, col)), row);\n        for (let i = 1; i <= this.nrow(); i++) {\n            if (i != row)\n                this.multiplyRowByAndAdd(this.getElement(i, col).neg(), row, i);\n        }\n        return this;\n    }\n    // Perform a pivot which preserves integers\n    pivotPreserveIntegers(row, col) {\n        if (this.getElement(row, col).compareTo(_constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer.ZERO) < 0)\n            this.multiplyRowBy(new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(-1), row);\n        const m = this.getElement(row, col);\n        for (let j = 1; j <= this.nrow(); j++)\n            if (j != row)\n                this.rowCombination(this.getElement(j, col).neg(), row, this.getElement(row, col), j, j);\n        return this;\n    }\n    // Perform a general operation on the matrix.\n    operate(op) {\n        const result = this.clone();\n        if (op instanceof _row_operation__WEBPACK_IMPORTED_MODULE_3__.MultiplyRow)\n            result.multiplyRowBy(op.scalar, op.row);\n        else if (op instanceof _row_operation__WEBPACK_IMPORTED_MODULE_3__.RowSwap)\n            result.swapRows(op.row1, op.row2);\n        else if (op instanceof _row_operation__WEBPACK_IMPORTED_MODULE_3__.MultiplyRowAndAdd)\n            result.rowCombination(op.scalar1, op.row1, op.scalar2, op.row2, op.row3);\n        else if (op instanceof _row_operation__WEBPACK_IMPORTED_MODULE_3__.Pivot)\n            result.pivot(op.row, op.col);\n        else if (op instanceof _row_operation__WEBPACK_IMPORTED_MODULE_3__.PivotPreserveIntegers)\n            result.pivotPreserveIntegers(op.row, op.col);\n        else\n            throw \"This line shouldn't be reached.\";\n        console.log(result.toString());\n        return result;\n    }\n}\n/* Vectors are Matrices.  ColumnVectors are matrices of size n by 1 and RowVectors are Matrices\nof size 1 by n.  */\nclass Vector extends Matrix {\n    dot(v) {\n        let result = _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer.ZERO;\n        if (this.length() != v.length())\n            throw new Error('The vectors lengths must be equal to take the dot product.');\n        const v1 = this.asArray();\n        const v2 = v.asArray();\n        for (let i = 0; i < v1.length; i++)\n            result = result.plus(v1[i].times(v2[i]));\n        return result;\n    }\n}\nclass ColumnVector extends Vector {\n    constructor(arg) {\n        super(arg.map((el) => [el]));\n    }\n    length() {\n        return this.nrow();\n    }\n    asArray() {\n        return Array(this.length())\n            .fill(0)\n            .map((_, i) => this._arr[i][0]);\n    }\n}\nclass RowVector extends Vector {\n    constructor(arg) {\n        super([arg]);\n    }\n    length() {\n        return this.ncol();\n    }\n    asArray() {\n        return Array(this.length())\n            .fill(0)\n            .map((_, j) => this._arr[0][j]);\n    }\n    // Redefine to return a RowVector\n    plus(r) {\n        return super.plus(r).row(1);\n    }\n    // Redefine to return a RowVector\n    minus(r) {\n        return super.minus(r).row(1);\n    }\n    times(arg) {\n        if (arg instanceof _constants_abstract_constant__WEBPACK_IMPORTED_MODULE_0__.Constant) {\n            const result = new RowVector(Array(this.length()).fill(0));\n            for (let j = 1; j <= result.ncol(); j++)\n                result.setElement(1, j, this.getElement(1, j).times(arg));\n            return result;\n        }\n        else {\n            return super.times(arg);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/matrix/matrix.ts?");

/***/ }),

/***/ "./src/matrix/row_operation.ts":
/*!*************************************!*\
  !*** ./src/matrix/row_operation.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElementaryRowOperation: () => (/* binding */ ElementaryRowOperation),\n/* harmony export */   MultiplyRow: () => (/* binding */ MultiplyRow),\n/* harmony export */   MultiplyRowAndAdd: () => (/* binding */ MultiplyRowAndAdd),\n/* harmony export */   Pivot: () => (/* binding */ Pivot),\n/* harmony export */   PivotPreserveIntegers: () => (/* binding */ PivotPreserveIntegers),\n/* harmony export */   RowSwap: () => (/* binding */ RowSwap)\n/* harmony export */ });\n/* harmony import */ var _constants_abstract_real__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/abstract_real */ \"./src/constants/abstract_real.ts\");\n/* harmony import */ var _constants_integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/integer */ \"./src/constants/integer.ts\");\n/* harmony import */ var _constants_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/parser */ \"./src/constants/parser.ts\");\n\n\n\nconst multAndAddRe = /(\\(?(-?[\\.\\d+\\/]*)\\)?\\*?[Rr](\\d+)(\\+|-))?\\(?(-?[\\.\\d+\\/]*)?\\)?\\*?[Rr](\\d+)(->[rR](\\d+)(.*))?/;\nconst swapRe1 = /^S(\\d+)(\\d+)$/;\nconst swapRe2 = /^[Rr](\\d+)<->[Rr](\\d+)$/;\nconst genfunctRe = /^(\\w+)\\(([\\d/.]+),([\\d/.]+)\\)$/;\nclass ElementaryRowOperation {\n    constructor() { }\n    static parse(str) {\n        let num1, row1, num2, row2, row3;\n        /* First check if the operation is a row swap */\n        const result2 = swapRe1.exec(str);\n        if (result2 !== null)\n            return new RowSwap(parseInt(result2[1]), parseInt(result2[2]));\n        const result3 = swapRe2.exec(str);\n        if (result3 !== null)\n            return new RowSwap(parseInt(result3[1]), parseInt(result3[2]));\n        var result = multAndAddRe.exec(str);\n        if (result != null) {\n            if (result[1] == undefined) {\n                // has form 2R2->R2;\n                num2 =\n                    result[5] === '-'\n                        ? new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(-1)\n                        : result[4] === '-'\n                            ? _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseRealConstant(result[5]).neg()\n                            : _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseRealConstant(result[5]);\n                row2 = parseInt(result[6]);\n                row3 = result[8] == undefined ? (row3 = row2) : parseInt(result[8]);\n                if (row2 !== row3)\n                    throw new Error('The two rows must be the same.');\n                return new MultiplyRow(num2, row2);\n            }\n            num1 =\n                result[2] === '' ? new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1) : result[2] === '-' ? new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(-1) : _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseRealConstant(result[2]);\n            row1 = parseInt(result[3]);\n            if (result[5] == undefined || result[5] == '')\n                num2 = result[4] == '-' ? new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(-1) : new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1);\n            else\n                num2 = result[4] == '-' ? _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseRealConstant(result[5]).neg() : _constants_parser__WEBPACK_IMPORTED_MODULE_2__.Parser.parseRealConstant(result[5]);\n            row2 = parseInt(result[6]);\n            if (result[8] == undefined)\n                row3 = row2;\n            else\n                row3 = parseInt(result[8]);\n            return new MultiplyRowAndAdd(num1, row1, num2, row2, row3);\n        }\n        const resultGen = genfunctRe.exec(str);\n        if (resultGen !== null) {\n            if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(resultGen[2]))\n                throw new Error('Row must be a positive integer');\n            if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(resultGen[3]))\n                throw new Error('Column must be a positive integer');\n            if (resultGen[1] === 'pivot')\n                return new Pivot(parseInt(resultGen[2]), parseInt(resultGen[3]));\n            if (resultGen[1] === 'piv')\n                return new PivotPreserveIntegers(parseInt(resultGen[2]), parseInt(resultGen[3]));\n        }\n        throw new Error('Error in Row operation');\n    }\n    // parse multiple row operations separated by commas.\n    static parseAll(str) {\n        return str.split(',').map(st => ElementaryRowOperation.parse(st));\n    }\n}\nclass MultiplyRow extends ElementaryRowOperation {\n    _row;\n    _scalar;\n    constructor(scalar, row) {\n        super();\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row}`))\n            throw new Error('Row is not a positive integer.');\n        this._row = row;\n        this._scalar = scalar;\n    }\n    get row() {\n        return this._row;\n    }\n    get scalar() {\n        return this._scalar;\n    }\n    toLaTeX() {\n        return `${this._scalar.toLaTeX()} R_{${this._row}} \\\\to R_{${this._row}}`;\n    }\n}\nclass RowSwap extends ElementaryRowOperation {\n    _row1;\n    _row2;\n    constructor(row1, row2) {\n        super();\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row1}`))\n            throw new Error('First row is not a positive integer.');\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row2}`))\n            throw new Error('Second row is not a positive integer.');\n        if (row1 === row2)\n            throw new Error('The two rows must be different.');\n        this._row1 = row1;\n        this._row2 = row2;\n    }\n    get row1() {\n        return this._row1;\n    }\n    get row2() {\n        return this._row2;\n    }\n    toLaTeX() {\n        return `R_{${this._row1}} \\\\leftrightarrow R_{${this._row2}}`;\n    }\n}\nclass MultiplyRowAndAdd extends ElementaryRowOperation {\n    _row1;\n    _row2;\n    _row3;\n    _scalar1;\n    _scalar2;\n    constructor(num1, row1, num2, row2, row3) {\n        super();\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row1}`))\n            throw new Error('First row is not a positive integer.');\n        this._row1 = row1;\n        this._scalar1 = num1;\n        if (typeof num2 === 'number' && row2 === undefined && row3 == undefined) {\n            if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${num2}`))\n                throw new Error('Second row is not a positive integer.');\n            this._row2 = num2;\n            this._scalar2 = new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1);\n            this._row3 = this._row2;\n        }\n        else if (num2 instanceof _constants_abstract_real__WEBPACK_IMPORTED_MODULE_0__.RealConstant && row2 !== undefined && row3 !== undefined) {\n            if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row2}`))\n                throw new Error('Second row is not a positive integer.');\n            if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row3}`))\n                throw new Error('Third row is not a positive integer.');\n            if (!(row3 == row1 || row3 == row2))\n                throw new Error('Third row must be either first or second row.');\n            this._row2 = row2;\n            this._row3 = row3;\n            this._scalar2 = num2;\n        }\n        else {\n            throw new Error(\"you shouldn't have reached this line\");\n        }\n        if (this._row1 == this._row2)\n            throw new Error('The first two rows input must be different.');\n    }\n    get row1() {\n        return this._row1;\n    }\n    get row2() {\n        return this._row2;\n    }\n    get row3() {\n        return this._row3;\n    }\n    get scalar1() {\n        return this._scalar1;\n    }\n    get scalar2() {\n        return this._scalar2;\n    }\n    toLaTeX() {\n        const r1 = (this._scalar1 instanceof _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer && this._scalar1.value == -1n\n            ? '-'\n            : this._scalar1 instanceof _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer && this._scalar1.value == 1n\n                ? ''\n                : `${this._scalar1.toLaTeX()}`) + ` R_{${this._row1}}`;\n        const op = this._scalar2.compareTo(_constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer.ZERO) < 0 ? '-' : '+';\n        const scal2 = op === '-' ? this._scalar2.neg() : this._scalar2.clone();\n        const scal3 = scal2.equals(new _constants_integer__WEBPACK_IMPORTED_MODULE_1__.Integer(1)) ? '' : scal2;\n        return `${r1} ${op} ${scal3}R_{${this._row2}} \\\\to R_{${this._row3}}`;\n    }\n}\nclass Pivot extends ElementaryRowOperation {\n    _row;\n    _col;\n    constructor(row, col) {\n        super();\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row}`))\n            throw new Error('Row is not a positive integer.');\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${col}`))\n            throw new Error('Column is not a positive integer.');\n        this._row = row;\n        this._col = col;\n    }\n    get row() {\n        return this._row;\n    }\n    get col() {\n        return this._col;\n    }\n    toString() {\n        return `pivot(${this._row},${this._col})`;\n    }\n    toLaTeX() {\n        return `\\\\text{pivot}(${this._row},${this._col})`;\n    }\n}\nclass PivotPreserveIntegers extends ElementaryRowOperation {\n    _row;\n    _col;\n    constructor(row, col) {\n        super();\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${row}`) || row == 0)\n            throw new Error('Row must be a positive integer.');\n        if (!_constants_parser__WEBPACK_IMPORTED_MODULE_2__.constRe.pos_int.test(`${col}`) || col == 0)\n            throw new Error('Column must be a positive integer.');\n        this._row = row;\n        this._col = col;\n    }\n    get row() {\n        return this._row;\n    }\n    get col() {\n        return this._col;\n    }\n    toString() {\n        return `piv(${this._row},${this._col})`;\n    }\n    toLaTeX() {\n        return `\\\\text{piv}(${this._row},${this._col})`;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/matrix/row_operation.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/apps/gauss-elim.ts");
/******/ 	
/******/ })()
;